#tag Class
Protected Class localconfSession
	#tag Method, Flags = &h0
		Function Append(recordObject as localconfRecord) As localconfRecord
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(initfile as FolderItem, password as string)
		  // all localconf settings files are password-protected
		  // the actual password is calculated using the user-supplied password: only localconfSession is meant to access the config file
		  
		  // returns empty string if OK, error message if error
		  
		  mLastError = ""
		  
		  if IsNull(initfile) then 
		    mLastError = "Configuration file is null!"
		  ElseIf initfile.Exists = false then
		    mLastError = "Configuration file does not exist!"
		  ElseIf password.Trim = "" Then
		    mLastError = "No password for configuration file!"
		  end if
		  if mLastError <> "" then Return  // error in init parameters
		  
		  dim db as new SQLiteDatabase
		  
		  db.DatabaseFile = initfile
		  db.EncryptionKey = preparePassword(password)
		  
		  dim outcome as Boolean = db.Connect
		  
		  if outcome = false then
		    mLastError = "Could not open settings file: Corrupt or wrong password"
		    Return  // fail
		  end if
		  
		  // connected ok
		  
		  file = initfile  // keep it there for reopeing the db -- localconfSession does not keep an open connection to the database file
		  passwd = EncodeBase64(password , 0)  // don't keep the plaintext password in memory
		  db.Close
		  
		  Return
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Shared Function create(file as FolderItem, password as string) As string
		  // returns empty string if OK, error message if error
		  
		  if IsNull(file) then return "Configuration file is null!"
		  if file.Exists then Return "Configuration file already exists!"
		  if password.Trim = "" then return "No password set for new configuration file!"
		  
		  dim db as new SQLiteDatabase
		  
		  db.DatabaseFile = file
		  db.EncryptionKey = preparePassword(password)
		  
		  dim outcome as Boolean 
		  dim errorMsg as string
		  
		  outcome = db.CreateDatabaseFile
		  if outcome = false then Return "Error creating new configuration file: " + db.ErrorMessage
		  
		  outcome = db.Connect
		  if outcome = false then
		    errorMsg = db.ErrorMessage
		    db.DatabaseFile.Delete
		    Return "Error opening newly created configuration file: " + errorMsg
		  end if
		  
		  dim CREATETABLE as string = "CREATE TABLE localconf (objidx INTEGER PRIMARY KEY AUTOINCREMENT , application VARCHAR NOT NULL DEFAULT '" + GlobalName + "' , user VARCHAR NOT NULL DEFAULT '" + GlobalName + "' , section VARCHAR NOT NULL DEFAULT '" + GlobalName + "' , key VARCHAR NOT NULL , value VARCHAR , comment VARCHAR)"
		  db.SQLExecute(CREATETABLE)
		  
		  dim INSERTINITRECORD as String = "INSERT INTO localconf (section , key , value , comment) VALUES ('LOCALCONF' , 'INITSTAMP' , '" + date(new date).SQLDateTime + "' , 'Automatically generated by localconf')"
		  db.SQLExecute(INSERTINITRECORD)
		  
		  if db.Error then
		    errorMsg = db.ErrorMessage
		    db.Close
		    db.DatabaseFile.Delete
		    Return "Error initializing newly created configuration file: " + errorMsg
		  end if
		  
		  db.Close
		  Return ""  // success
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function DumpAll() As localconfRecord()
		  // if error then output is 1-element array with .error = true and .errorMessage hold reason for error
		  // if localconf file is empty then output is an array having UBound = -1
		  
		  dim dump(-1) as localconfRecord
		  
		  if validateCachedParams = false then
		    dump.Append new localconfRecord("Localconf session no longer valid, please restart!")
		    Return dump
		  end if
		  
		  dim db as new SQLiteDatabase
		  db.DatabaseFile = file
		  db.EncryptionKey = preparePassword(DecodeBase64(passwd))
		  
		  if db.Connect = false then 
		    dump.Append new localconfRecord("Error accessing settings file: " + db.ErrorMessage)
		    Return dump
		  end if
		  
		  dim dumpdata as RecordSet = db.SQLSelect("SELECT * FROM localconf ORDER BY objidx ASC")
		  
		  if db.error = true then 
		    dump.Append new localconfRecord("Error accessing settings file: " + db.ErrorMessage)
		    Return dump
		  end if
		  
		  dim record as localconfRecord
		  
		  while not dumpdata.EOF
		    record = new localconfRecord(True)
		    
		    record.objidx = dumpdata.Field("objidx").IntegerValue
		    record.application = dumpdata.Field("application").StringValue
		    record.user = dumpdata.Field("user").StringValue
		    record.section = dumpdata.Field("section").StringValue
		    record.key = dumpdata.Field("key").StringValue
		    
		    record.value = dumpdata.Field("value").StringValue
		    record.comment = dumpdata.Field("comment").StringValue
		    
		    dump.Append record
		    
		    dumpdata.MoveNext
		  wend
		  
		  Return dump
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function LastError() As string
		  Return mLastError
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Function preparePassword(plaintext as String) As string
		  // empty salt means use internal fixed salt via getSalt method
		  dim hash as MemoryBlock = Crypto.PBKDF2(salt , plaintext , 7 , 8 , Crypto.Algorithm.SHA512)
		  dim output as String
		  dim char as string
		  
		  for i as Integer = 0 to hash.Size - 1
		    char = str(hash.UInt8Value(i).ToHex(2))
		    if i mod 2 = 0 then char = char.Lowercase
		    output = output + char
		  next i
		  
		  return output  // should always be a 16 character string
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ReadArray(recordObject as localconfRecord) As localconfRecord()
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ReadSingle(recordObject as localconfRecord) As localconfRecord
		  // reads the first element that matches the (application/user/section/key) OR (objidx) criterion
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Function Salt() As string
		  // replace it with your own salt if needed
		  
		  Return "dEfAu1Ts@LT!"
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function validateCachedParams() As Boolean
		  if file = nil then return false
		  if file.Exists = false then return false
		  if passwd = "" then return false
		  if DecodeBase64(passwd) = "" then return False
		  
		  Return true
		  
		End Function
	#tag EndMethod


	#tag Property, Flags = &h21
		Private file As FolderItem
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mLastError As string
	#tag EndProperty

	#tag Property, Flags = &h21
		Private passwd As String
	#tag EndProperty


	#tag Constant, Name = GlobalName, Type = String, Dynamic = False, Default = \"GLOBAL", Scope = Public
	#tag EndConstant


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
